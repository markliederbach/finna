version: "3"

vars:
  TOOL_BIN:
    sh: echo "$(pwd)/bin"

tasks:
  deps:
    desc: Install project dependencies
    cmds:
      - cmd: mkdir -p {{.TOOL_BIN}}
      - task: golangci-lint
      - task: goreleaser

  golangci-lint:
    vars:
      VERSION: "1.50.1"
    cmds:
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{.TOOL_BIN}} v{{.VERSION}}
    status:
      - '[[ $({{.TOOL_BIN}}/golangci-lint version) == *"{{.VERSION}}"* ]]'

  goreleaser:
    vars:
      VERSION: "1.12.3"
    cmds:
      - task: go-get-tool
        vars:
          TOOL_NAME: goreleaser
          TOOL_SRC: github.com/goreleaser/goreleaser@v{{.VERSION}}
    status:
      - '[[ $({{.TOOL_BIN}}/goreleaser --version) == *"{{.VERSION}}"* ]]'

  go-get-tool:
    desc: "`go get` for a tool and install it to local bin"
    silent: true
    cmds:
      - |
        set -e
        mkdir -p {{.TOOL_BIN}}
        echo "Downloading {{.TOOL_SRC}}"
        GOBIN={{.TOOL_BIN}} go install {{.TOOL_SRC}}
    status:
      - test -f {{.TOOL_BIN}}/{{.TOOL_NAME}}
    preconditions:
      - sh: test ! -z "{{.TOOL_BIN}}"
        msg: "TOOL_BIN must be set to an absolute path"
      - sh: test ! -z "{{.TOOL_NAME}}"
        msg: "TOOL_NAME is a required variable"
      - sh: test ! -z "{{.TOOL_SRC}}"
        msg: "TOOL_SRC is a required variable"

  api:
    desc: Run the API locally with provided .env.docker variables
    deps:
      - docker:api:build:local
    cmds:
      - docker run --env-file .env.docker --rm --interactive -p 8080:8080 finna:latest

  up:
    desc: Run the frontend locally
    deps:
      - docker:frontend:build:local
    cmds:
      - docker compose --file docker-compose.yml --env-file .env.docker up --build --detach --remove-orphans api

  logs:
    desc: Read the frontend logs
    cmds:
      - docker compose --file docker-compose.yml logs --follow api frontend

  stop:
    desc: Stop the frontend locally
    cmds:
      - docker compose --file docker-compose.yml stop api frontend

  format:
    desc: Run the app
    vars:
      IN: '{{.IN | default "input.csv"}}'
      OUT: '{{.OUT | default "output.csv"}}'
    cmds:
      - go run cmd/finna/main.go format -i input.csv -o output.csv

  lint:
    desc: Lint code
    cmds:
      - "{{.TOOL_BIN}}/golangci-lint run --config .golangci.yml --verbose"
    preconditions:
      - sh: "{{.TOOL_BIN}}/golangci-lint version"
        msg: Run `task deps` to install tools

  test:
    desc: Run package tests
    cmds:
      - task: test-base
      - >
        cat coverage.out
        | grep -v
        -e "mocks/"
        -e "cmds/"
        > coverage.out.tmp
      - mv coverage.out.tmp coverage.out
      - task: coverage

  test-base:
    desc: Run package tests
    cmds:
      - go clean -testcache
      - go test -mod=vendor -coverpkg=./... -coverprofile=coverage.out ./...

  test-cover:
    desc: Run all tests and display coverage report
    deps:
      - test-base
    cmds:
      - go tool cover -html=coverage.out

  coverage:
    desc: Exits in non-zero if total coverage is below threshold
    vars:
      THRESHOLD: 0
    cmds:
      - >
        coverage=$(go tool cover -func=coverage.out | grep "total:" | grep -o -E '1?[0-9][0-9]?.[0-9]');
        echo "Total Coverage:" $coverage%;
        if awk "BEGIN {exit !($coverage < {{.THRESHOLD}})}"; then
          echo "[FAIL] Total coverage is less than {{.THRESHOLD}}%"
          exit 1
        else
          echo [PASS]
          exit 0
        fi
    preconditions:
      - test -f coverage.out
    silent: true

  env:
    desc: Follow prompts to generate a new .env file for local development
    cmds:
      - |
        printf "Plaid Client ID: "
        stty -echo
        read plaid_client_id
        export plaid_client_id=$plaid_client_id
        stty echo

        printf "\n"

        printf "Plaid Secret: "
        stty -echo
        read plaid_secret
        export plaid_secret=$plaid_secret
        stty echo

        # printf "\n"

        # printf "Domain: "
        # read domain
        # export domain=$domain

        envsubst '$plaid_client_id,$plaid_secret' < .env.template > .env

        sed -e 's|["'\'']||g' .env > .env.docker
    silent: true
    preconditions:
      - sh: test ! -f .env
        msg: .env already exists. Refusing to overwrite.
      - sh: which envsubst
        msg: Must have `envsubst` installed to run this task

  docker:login:
    desc: Login to ghcr.io
    cmds:
      - echo $GITHUB_API_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
    preconditions:
      - sh: test ! -z "$GITHUB_USERNAME"
        msg: Must set the GITHUB_USERNAME environment variable
      - sh: test ! -z "$GITHUB_API_TOKEN"
        msg: Must set the GITHUB_TOKEN environment variable

  docker:frontend:build:local:
    desc: Build the frontend docker image locally
    cmds:
      - docker build --pull --rm -f ./frontend/Dockerfile -t frontend:latest "."

  docker:api:build:local:
    desc: Build the API docker image locally
    cmds:
      - docker build --pull --rm -f ./docker/api/Dockerfile -t finna:latest "."

  docker:api:run:remote:
    desc: Run the application from the latest build with provided .env.docker variables
    deps:
      - docker:login
    cmds:
      - docker run --pull always --rm --env-file .env.docker ghcr.io/markliederbach/finna:latest

  goreleaser:check:
    desc: Validate the Goreleaser configuration
    cmds:
      - "{{.TOOL_BIN}}/goreleaser check"
    preconditions:
      - sh: "{{.TOOL_BIN}}/goreleaser --version"
        msg: Run `task deps` to install tools

  goreleaser:build:
    desc: Build a snapshot locally
    cmds:
      - "{{.TOOL_BIN}}/goreleaser build --snapshot --rm-dist"
    preconditions:
      - sh: "{{.TOOL_BIN}}/goreleaser --version"
        msg: Run `task deps` to install Go tools

  bump:
    vars:
      CHANGE_TYPE: '{{default "nil" .CHANGE_TYPE}}'
      CURRENT_TAG:
        sh: git describe --tags | grep -o -E \\d+\\.\\d+\\.\\d+
    cmds:
      - |
        level="{{.CHANGE_TYPE}}"
        tag="{{.CURRENT_TAG}}"
        current="${tag//v}"
        major=$(echo $current | cut -d. -f1)
        minor=$(echo $current | cut -d. -f2)
        patch=$(echo $current | cut -d. -f3)
        case $level in
            patch)
                patch=$((patch+1))
            ;;
            minor)
                patch=0
                minor=$((minor+1))
            ;;
            major)
                patch=0
                minor=0
                major=$((major+1))
            ;;
            *)
                echo "Invalid level passed"
                return 2
        esac
        new="v$major.$minor.$patch"
        echo "[Current] v$current -> [New] $new"
        git tag $new && git push origin $new
    preconditions:
      - sh: "[[ $(git rev-parse --abbrev-ref HEAD) == 'main' ]]"
        msg: Must be on main to push a tag
      - sh: "git diff --quiet"
        msg: No uncommmitted files allowed before publishing
      - sh: "[ '{{.CHANGE_TYPE}}' != 'nil' ]"
        msg: Must run one of `task bump:[major, minor, patch]`
    silent: true

  bump:major:
    desc: Bump the major version
    cmds:
      - task: bump
        vars: { CHANGE_TYPE: "major" }
  bump:minor:
    desc: Bump the minor version
    cmds:
      - task: bump
        vars: { CHANGE_TYPE: "minor" }
  bump:patch:
    desc: Bump the patch version
    cmds:
      - task: bump
        vars: { CHANGE_TYPE: "patch" }
